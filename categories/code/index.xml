<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on A Humbly Arrogant Blog</title>
    <link>http://blog.humblyarrogant.io/categories/code/index.xml</link>
    <description>Recent content in Code on A Humbly Arrogant Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Iain Cambridge, all rights reserved.</copyright>
    <atom:link href="http://blog.humblyarrogant.io/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Revel : Force template format</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-26-revel-force-template-format/</link>
      <pubDate>Sat, 26 Apr 2014 15:39:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-26-revel-force-template-format/</guid>
      <description>&lt;p&gt;So in Revel you can have your template in several different formats: html, json, xml, or txt. This is super awesome. As it allows you to send the same data and display different formats - Obivously. It also determines what template to use based on the http request headers that have been sent. So if your request sends that it accepts application/xml it&amp;rsquo;ll use xml and if you request says application/json it uses json.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;All awesome. But what if I want to debug something that should only ever be json. Or even more interesting what if I sent that I accept html and json but with json second in the list. AngularJS seems to do this by default, took me a while to figure out what was going on. So I need a way of forcing revel to just use one file format no matter what the http headers are. Thankfully it&amp;rsquo;s super simple, one line in your controller action to set the Request member&amp;rsquo;s Format member to the desired format and it&amp;rsquo;ll use that.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/11321687.js?file=snippet.go&#39;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;So in full example.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/11321687.js?file=test.go&#39;&gt;&lt;/script&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Observer pattern in golang</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-22-observer-pattern-in-golang/</link>
      <pubDate>Sat, 22 Mar 2014 10:37:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-22-observer-pattern-in-golang/</guid>
      <description>

&lt;p&gt;For some reason at some point, I thought it would be hard to implement the observer pattern in Go. Then I made an issue for me to blog about it. Well it&amp;rsquo;s not hard. It&amp;rsquo;s as easy as it is in every
other language.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;observers&#34;&gt;Observers&lt;/h1&gt;

&lt;p&gt;First part of the observer pattern is you need the actual observers. The logic that you want executed whenever something happens. Here I&amp;rsquo;ve just put a simple log print statement that will print out the name of the hook to the log.&lt;/p&gt;

&lt;p&gt;Created an interface to allow for more flexible typing later on.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/9708081.js?file=interface.go&#39;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;h1 id=&#34;observer-notifier&#34;&gt;Observer Notifier&lt;/h1&gt;

&lt;p&gt;The main part of the logic, simply have an add observer and then have a process function that loops through and calls them all.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/9708081.js?file=observer.go&#39;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;{% gist 9708081 observer.go %}&lt;/p&gt;

&lt;h1 id=&#34;full&#34;&gt;Full&lt;/h1&gt;

&lt;p&gt;Here is a copy of it all together. As you can see it&amp;rsquo;s really simple to whack together once you have a half decent understanding of Go.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#39;https://gist.github.com/9708081.js?file=main.go&#39;&gt;&lt;/script&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>