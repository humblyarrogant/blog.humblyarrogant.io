<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on A Humbly Arrogant Blog</title>
    <link>http://blog.humblyarrogant.io/categories/docker/index.xml</link>
    <description>Recent content in Docker on A Humbly Arrogant Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Iain Cambridge, all rights reserved.</copyright>
    <atom:link href="http://blog.humblyarrogant.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OVH &amp; Docker - Failed to register layer: devmapper</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-06-failed-to-register-ovh/</link>
      <pubDate>Mon, 06 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-06-failed-to-register-ovh/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using OVH&amp;rsquo;s dedicated server range recently. When ever I tried to use docker with the Ubuntu latest LTS I ended up with an error &lt;code&gt;failed to register layer: devmapper:&lt;/code&gt;. The solution is rather simple, OVH dedicated servers use rather old and unsupported kernel versions.
The solution is upgrade linux kernel.
&lt;/p&gt;

&lt;p&gt;Step 1. Install the latest kernel, tools, and extra stuff.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt-get install linux-image-4.8.0-34-generic linux-tools-4.8.0-34-generic linux-image-extra-4.8.0-34-generic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 2. Move the old kernel out of the /boot directory.
&lt;code&gt;mv bzImage-3.14.32-xxxx-grs-ipv6-64 /root/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Run grub update so it boots into the new kernel.
&lt;code&gt;update-grub&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 4. Reboot so it uses the new kernel.
&lt;code&gt;reboot&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go dep in Docker</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-04-Go-dep-in-docker/</link>
      <pubDate>Sat, 04 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-04-Go-dep-in-docker/</guid>
      <description>&lt;p&gt;Go&amp;rsquo;s dependency handling has been an area which has been needing unification, over the years. Multiple package managers have been created. The Go community has been working on creating a dependency manager recently, which they plan on getting added to the official toolchain. I&amp;rsquo;ve decided to jump on the bandwagon and start using this tool. Here&amp;rsquo;s how I&amp;rsquo;ve been using it in docker.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The first issue I encountered was the command &lt;code&gt;dep&lt;/code&gt; not being found. It turned out my original docker build file had &lt;code&gt;GOBIN&lt;/code&gt; pointed to somewhere that was not in the &lt;code&gt;PATH&lt;/code&gt; env for some reason. Looking at the original &lt;code&gt;Dockerfile&lt;/code&gt; for golang it &lt;code&gt;GOBIN&lt;/code&gt; doesn&amp;rsquo;t appear to be set at all. So I&amp;rsquo;ve set it to &lt;code&gt;/go/bin&lt;/code&gt; which has already been added to the path.&lt;/p&gt;

&lt;p&gt;The next issue was, I was storing and building my code outside of the &lt;code&gt;GOPATH&lt;/code&gt;. So I moved where I was storing my code to inside the &lt;code&gt;GOPATH&lt;/code&gt;. With that done it was just a case of running the &lt;code&gt;dep&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;An example &lt;code&gt;Dockerfile&lt;/code&gt; can be found below.&lt;/p&gt;

&lt;p&gt;{% gist 163763cd1017d8a5319c0c48ec697969 Dockerfile %}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Increase docker device size on Ubuntu</title>
      <link>http://blog.humblyarrogant.io/post/2017-01-31-Increase-docker-device-size/</link>
      <pubDate>Tue, 31 Jan 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-01-31-Increase-docker-device-size/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve got an application that I&amp;rsquo;m running via  and Docker. That requires a certain amount of disk space and would run out of space very quickly with the default 10G limit that Docker comes with.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I figured the easiest way to move forward with this would be too look into if I was able to increase the size of device. It turns out you can. You can pass an option when you&amp;rsquo;re starting docker. The flag is &lt;code&gt;--storage-opt dm.basesize=15G&lt;/code&gt;. So to run it it would be the below command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/docker daemon --storage-opt dm.basesize=15G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However I wanted to be able to do this while still using the Ubuntu daemon management. To do this I had to edit &lt;code&gt;/etc/default/docker&lt;/code&gt; and add the line &lt;code&gt;DOCKER_OPTS=&amp;quot;--storage-opt dm.basesize=15G&amp;quot;&lt;/code&gt; and then restart my docker daemon.&lt;/p&gt;

&lt;p&gt;Once I did this I noticed new containers weren&amp;rsquo;t being started with the new device size. It turned out that to get docker to use the new device base size I had to delete all my containers and images and pull the images again.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>