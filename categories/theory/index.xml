<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Theory on A Humbly Arrogant Blog</title>
    <link>http://blog.humblyarrogant.io/categories/theory/</link>
    <description>Recent content in Theory on A Humbly Arrogant Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 01 Nov 2014 15:12:23 +0100</lastBuildDate>
    
	<atom:link href="http://blog.humblyarrogant.io/categories/theory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Don&#39;t return null</title>
      <link>http://blog.humblyarrogant.io/post/2014-11-01-dont-return-null/</link>
      <pubDate>Sat, 01 Nov 2014 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-11-01-dont-return-null/</guid>
      <description>If you&amp;rsquo;re programming in an object orientated language that supports exceptions you should never return null in a method that returns an object.
Most object orientated languages support exceptions. Exceptions give us an extremely expressive way to represent error conditions. We throw an exception and the program bails out of where it is and then goes to the error handling section. We can create custom exceptions to express exactly what sort of error occured.</description>
    </item>
    
    <item>
      <title>My Opinion on testing code with 3rd party API calls</title>
      <link>http://blog.humblyarrogant.io/post/2014-10-09-my-opinion-on-testing-code-with-3rd-party-api-calls/</link>
      <pubDate>Thu, 09 Oct 2014 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-10-09-my-opinion-on-testing-code-with-3rd-party-api-calls/</guid>
      <description>I&amp;rsquo;ve recently had a discussion about how I would go about testing code that makes calls to a remote third party API. It seems my way of thinking isn&amp;rsquo;t the same as most others. So I figured I would write out my thoughts and explanation behind why I would go for this route.
Others peoples approach So first I want to explain other peoples thought patterns seem to be. It goes like:</description>
    </item>
    
    <item>
      <title>How I use Dependency Injection</title>
      <link>http://blog.humblyarrogant.io/post/2014-06-05-how-i-use-dependency-injection/</link>
      <pubDate>Thu, 05 Jun 2014 20:39:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-06-05-how-i-use-dependency-injection/</guid>
      <description>I&amp;rsquo;ve been thinking about dependency injection a lot recently and the best way to do it in a clean manner. I recently changed how I was injecting some dependencies, at code review I was asked why. So I figured I would write a blog post fully stating my current views on how to implement Dependency Injection.
There are three main ways of injecting a single dependency, as well as what I would consider two ways of injecting multiple dependencies these are also known as patterns.</description>
    </item>
    
    <item>
      <title>Why Revel?</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-19-why-revel/</link>
      <pubDate>Sat, 19 Apr 2014 14:40:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-19-why-revel/</guid>
      <description>So lately I&amp;rsquo;ve been working on a project to increase productivity when dealing with Bitbucket and Jenkins. As I am a web developer, it&amp;rsquo;s a web app. So one of the first questions when building an application these days seems to be what framework? This for me has taken a month to really decide. In the end I choose Revel.
At first At first I decided to use Gorilla Web Toolkit.</description>
    </item>
    
    <item>
      <title>Social Engineering defence</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-13-social-engineering-defence/</link>
      <pubDate>Sun, 13 Apr 2014 19:40:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-13-social-engineering-defence/</guid>
      <description>So a while back I read a blog post by ChunkHost about a &amp;ldquo;Huge security hole in Sendgrid&amp;rdquo;. And instantly I thought why isn&amp;rsquo;t there a protection against something which is so obviously dodgy. After a few seconds I thought of an easy protection against such an attack, I&amp;rsquo;ve now found time to write about it so here it is.
#The attack
The attack was simple, someone phoned up Sendgrid&amp;rsquo;s customer support and talked them into changing the email for the ChunkHost account from support@chunkhost.</description>
    </item>
    
    <item>
      <title>The git-flow branch model is waterfall?</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-20-gitflow-is-waterfall-slash/</link>
      <pubDate>Thu, 20 Mar 2014 15:23:04 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-20-gitflow-is-waterfall-slash/</guid>
      <description>For those not in the know, git-flow is technically a tool for git which allows for the easy use of a specific branch model. Which is most commonly referred to as git-flow. This blog post isn&amp;rsquo;t about that tool which is super useful. But is about the branch model. Which is also super useful in my opinion if you&amp;rsquo;re implementing the waterfall development process.
Disclaimer: This isn&amp;rsquo;t meant to be a criticism of either the branching model or the waterfall process.</description>
    </item>
    
  </channel>
</rss>