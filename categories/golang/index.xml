<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on A Humbly Arrogant Blog</title>
    <link>http://blog.humblyarrogant.io/categories/golang/</link>
    <description>Recent content in Golang on A Humbly Arrogant Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 04 Feb 2017 15:12:23 +0100</lastBuildDate>
    
	<atom:link href="http://blog.humblyarrogant.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go dep in Docker</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-04-go-dep-in-docker/</link>
      <pubDate>Sat, 04 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-04-go-dep-in-docker/</guid>
      <description>&lt;p&gt;Go&amp;rsquo;s dependency handling has been an area which has been needing unification, over the years. Multiple package managers have been created. The Go community has been working on creating a dependency manager recently, which they plan on getting added to the official toolchain. I&amp;rsquo;ve decided to jump on the bandwagon and start using this tool. Here&amp;rsquo;s how I&amp;rsquo;ve been using it in docker.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Revel : Force template format</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-26-revel-force-template-format/</link>
      <pubDate>Sat, 26 Apr 2014 15:39:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-26-revel-force-template-format/</guid>
      <description>So in Revel you can have your template in several different formats: html, json, xml, or txt. This is super awesome. As it allows you to send the same data and display different formats - Obivously. It also determines what template to use based on the http request headers that have been sent. So if your request sends that it accepts application/xml it&amp;rsquo;ll use xml and if you request says application/json it uses json.</description>
    </item>
    
    <item>
      <title>Observer pattern in golang</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-22-observer-pattern-in-golang/</link>
      <pubDate>Sat, 22 Mar 2014 10:37:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-22-observer-pattern-in-golang/</guid>
      <description>For some reason at some point, I thought it would be hard to implement the observer pattern in Go. Then I made an issue for me to blog about it. Well it&amp;rsquo;s not hard. It&amp;rsquo;s as easy as it is in every other language.
Observers First part of the observer pattern is you need the actual observers. The logic that you want executed whenever something happens. Here I&amp;rsquo;ve just put a simple log print statement that will print out the name of the hook to the log.</description>
    </item>
    
  </channel>
</rss>