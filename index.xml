<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Humbly Arrogant Blog</title>
    <link>http://blog.humblyarrogant.io/</link>
    <description>Recent content on A Humbly Arrogant Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 28 Feb 2017 12:03:53 +0100</lastBuildDate>
    
	<atom:link href="http://blog.humblyarrogant.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code Review: Sanity Checks</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-27-code-review-sanity-checks/</link>
      <pubDate>Tue, 28 Feb 2017 12:03:53 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-27-code-review-sanity-checks/</guid>
      <description>For the most part, sanity checks are put into the code to ensure there are no bugs. For this reason, guaranteeing sanity checks are done correctly becomes necessary. If you do not check to see if the data is valid, and it is invalid, then you&amp;rsquo;re going to allow invalid data to proceed. Here, I&amp;rsquo;m going to discuss how I think we should do sanity checking in PHP.
Asserting Valid Data What I&amp;rsquo;ve seen a lot is people are asserting for invalid data when they&amp;rsquo;re doing their sanity check.</description>
    </item>
    
    <item>
      <title>Code Review: Single Responsibility Principle</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-21-code-review-single-responsibility-principle/</link>
      <pubDate>Tue, 21 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-21-code-review-single-responsibility-principle/</guid>
      <description>&lt;p&gt;Single Responsibility Principle (SRP) is probably one of the most well-known principles from SOLID. At its core is a desire to prevent classes from becoming overwhelming and bloated. While enabling the ability to change how a single thing works by only changing a single class. So the benefits of SRP are that you have an easier codebase to maintain since classes are less complex and when you wish to change something you only have to change a single class. In this blog, I will go through some ways to try and help avoid breaching SRP while doing code review.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OVH &amp; Docker - Failed to register layer: devmapper</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-06-failed-to-register-ovh/</link>
      <pubDate>Mon, 06 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-06-failed-to-register-ovh/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using OVH&amp;rsquo;s dedicated server range recently. When ever I tried to use docker with the Ubuntu latest LTS I ended up with an error &lt;code&gt;failed to register layer: devmapper:&lt;/code&gt;. The solution is rather simple, OVH dedicated servers use rather old and unsupported kernel versions.
The solution is upgrade linux kernel.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go dep in Docker</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-04-go-dep-in-docker/</link>
      <pubDate>Sat, 04 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-04-go-dep-in-docker/</guid>
      <description>&lt;p&gt;Go&amp;rsquo;s dependency handling has been an area which has been needing unification, over the years. Multiple package managers have been created. The Go community has been working on creating a dependency manager recently, which they plan on getting added to the official toolchain. I&amp;rsquo;ve decided to jump on the bandwagon and start using this tool. Here&amp;rsquo;s how I&amp;rsquo;ve been using it in docker.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RabbitMQ One consumer blocking others</title>
      <link>http://blog.humblyarrogant.io/post/2017-02-01-rabbitmq-multiple-consumers/</link>
      <pubDate>Wed, 01 Feb 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-02-01-rabbitmq-multiple-consumers/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on a distributed application that requires multiple workers to process items from a queue. I decided to use RabbitMQ as the queue. However I noticed that there was a 10 minute pause or whenever the consumer started up. After looking into it further I noticed that it appeared that only one consumer could run at any given time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Increase docker device size on Ubuntu</title>
      <link>http://blog.humblyarrogant.io/post/2017-01-31-increase-docker-device-size/</link>
      <pubDate>Tue, 31 Jan 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-01-31-increase-docker-device-size/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve got an application that I&amp;rsquo;m running via  and Docker. That requires a certain amount of disk space and would run out of space very quickly with the default 10G limit that Docker comes with.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Are you a good developer</title>
      <link>http://blog.humblyarrogant.io/post/2017-01-16-are-you-a-good-developer/</link>
      <pubDate>Mon, 16 Jan 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-01-16-are-you-a-good-developer/</guid>
      <description>In development we constantly bemoan bad developers. But what I&amp;rsquo;ve noticed is everyone generally thinks they&amp;rsquo;re doing a good job and the other developers are bad. I don&amp;rsquo;t think you can exactly define what is a good developer down to a tee but I think you can have rough benchmarks for whether or not you&amp;rsquo;re good. These generally are if you follow well defined practices. There are levels of development practices ranging from the basics (DRY) to advance (CQRS).</description>
    </item>
    
    <item>
      <title>What I learned with a big database</title>
      <link>http://blog.humblyarrogant.io/post/2017-01-15-what-i-learned-with-a-big-database/</link>
      <pubDate>Sun, 15 Jan 2017 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2017-01-15-what-i-learned-with-a-big-database/</guid>
      <description>So I recently started a new side project that involves data mining. While working on this project I&amp;rsquo;ve learned a little bit about how to manage a larger than usual database. At the point of writing this the database is approximately 50GB and growing daily. So here are a few things I&amp;rsquo;ve learned.
Backups This is probably the main area where I learned a bunch of stuff. Usually when you&amp;rsquo;re dealing with a database of approximately 1GB in size, backups at midnight are rather routine.</description>
    </item>
    
    <item>
      <title>Symfony Password encoding</title>
      <link>http://blog.humblyarrogant.io/post/2015-06-01-symfony-password-encoding/</link>
      <pubDate>Mon, 01 Jun 2015 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2015-06-01-symfony-password-encoding/</guid>
      <description>A very simple breakdown of how the password encoding works with Symfony 2.
Encoder factory The encoder factory is where you get your password encoders from. You pass in a User entity and it returns an Encoder. Encoders are created from the encoder configs and stored within the factory, there is only a single instance of the encoder unless you clone it outside of the factory. The encoder configs are passed to the factory upon creation.</description>
    </item>
    
    <item>
      <title>Hack: Types</title>
      <link>http://blog.humblyarrogant.io/post/2014-11-23-hack-types/</link>
      <pubDate>Sun, 23 Nov 2014 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-11-23-hack-types/</guid>
      <description>Facebook&amp;rsquo;s Hack bring lots of features that a lot of other programming languages get to take advantage of. One of major advantages of Hack over PHP is a typing system. So here&amp;rsquo;s a quick run over of the typing system as I understand it.
Annotate Annotating is when you define which type is going to be used. You can type the following:
 function arguments function return class variable constants  For function arguments you just put the type before the variable name for the argument.</description>
    </item>
    
    <item>
      <title>Don&#39;t return null</title>
      <link>http://blog.humblyarrogant.io/post/2014-11-01-dont-return-null/</link>
      <pubDate>Sat, 01 Nov 2014 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-11-01-dont-return-null/</guid>
      <description>If you&amp;rsquo;re programming in an object orientated language that supports exceptions you should never return null in a method that returns an object.
Most object orientated languages support exceptions. Exceptions give us an extremely expressive way to represent error conditions. We throw an exception and the program bails out of where it is and then goes to the error handling section. We can create custom exceptions to express exactly what sort of error occured.</description>
    </item>
    
    <item>
      <title>My Opinion on testing code with 3rd party API calls</title>
      <link>http://blog.humblyarrogant.io/post/2014-10-09-my-opinion-on-testing-code-with-3rd-party-api-calls/</link>
      <pubDate>Thu, 09 Oct 2014 15:12:23 +0100</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-10-09-my-opinion-on-testing-code-with-3rd-party-api-calls/</guid>
      <description>I&amp;rsquo;ve recently had a discussion about how I would go about testing code that makes calls to a remote third party API. It seems my way of thinking isn&amp;rsquo;t the same as most others. So I figured I would write out my thoughts and explanation behind why I would go for this route.
Others peoples approach So first I want to explain other peoples thought patterns seem to be. It goes like:</description>
    </item>
    
    <item>
      <title>How I use Dependency Injection</title>
      <link>http://blog.humblyarrogant.io/post/2014-06-05-how-i-use-dependency-injection/</link>
      <pubDate>Thu, 05 Jun 2014 20:39:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-06-05-how-i-use-dependency-injection/</guid>
      <description>I&amp;rsquo;ve been thinking about dependency injection a lot recently and the best way to do it in a clean manner. I recently changed how I was injecting some dependencies, at code review I was asked why. So I figured I would write a blog post fully stating my current views on how to implement Dependency Injection.
There are three main ways of injecting a single dependency, as well as what I would consider two ways of injecting multiple dependencies these are also known as patterns.</description>
    </item>
    
    <item>
      <title>Revel : How to use Drone.io for testing</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-26-revel-use-drone-io-for-testing/</link>
      <pubDate>Sat, 26 Apr 2014 20:39:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-26-revel-use-drone-io-for-testing/</guid>
      <description>Being a lover of testing, continuous intergration, and cloud services. I wanted to be able to get a build of status of a Revel framework app I&amp;rsquo;m working on. Since Revel uses it&amp;rsquo;s own command to run and build applications the standard way of doing a build for Golang are out. I wanted to use Drone.io instead of travis so if I wanted to make it private I could without paying a lot.</description>
    </item>
    
    <item>
      <title>Revel : Force template format</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-26-revel-force-template-format/</link>
      <pubDate>Sat, 26 Apr 2014 15:39:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-26-revel-force-template-format/</guid>
      <description>So in Revel you can have your template in several different formats: html, json, xml, or txt. This is super awesome. As it allows you to send the same data and display different formats - Obivously. It also determines what template to use based on the http request headers that have been sent. So if your request sends that it accepts application/xml it&amp;rsquo;ll use xml and if you request says application/json it uses json.</description>
    </item>
    
    <item>
      <title>Why Revel?</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-19-why-revel/</link>
      <pubDate>Sat, 19 Apr 2014 14:40:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-19-why-revel/</guid>
      <description>So lately I&amp;rsquo;ve been working on a project to increase productivity when dealing with Bitbucket and Jenkins. As I am a web developer, it&amp;rsquo;s a web app. So one of the first questions when building an application these days seems to be what framework? This for me has taken a month to really decide. In the end I choose Revel.
At first At first I decided to use Gorilla Web Toolkit.</description>
    </item>
    
    <item>
      <title>Social Engineering defence</title>
      <link>http://blog.humblyarrogant.io/post/2014-04-13-social-engineering-defence/</link>
      <pubDate>Sun, 13 Apr 2014 19:40:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-04-13-social-engineering-defence/</guid>
      <description>So a while back I read a blog post by ChunkHost about a &amp;ldquo;Huge security hole in Sendgrid&amp;rdquo;. And instantly I thought why isn&amp;rsquo;t there a protection against something which is so obviously dodgy. After a few seconds I thought of an easy protection against such an attack, I&amp;rsquo;ve now found time to write about it so here it is.
#The attack
The attack was simple, someone phoned up Sendgrid&amp;rsquo;s customer support and talked them into changing the email for the ChunkHost account from support@chunkhost.</description>
    </item>
    
    <item>
      <title>xvfb-run and wkhtmltopdf won&#39;t run in Jenkins/Apache</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-28-xvfb-run-wont-run-in-jenkins-apache/</link>
      <pubDate>Fri, 28 Mar 2014 22:26:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-28-xvfb-run-wont-run-in-jenkins-apache/</guid>
      <description>I recently came across a rather unsual error with our testing suite while running on Jenkins. The test would pass on our development environment, not exactly odd in itself. Sadly they aren&amp;rsquo;t exact copies, patch level out and what not. However the test would pass on the Jenkins server if ran via command line. So it wasn&amp;rsquo;t that a minor release had a bug fix that was causing the issue. Since after all my googling on the subject turned up nothing I thought I would write up how I found out what it was and what the cause and solution was.</description>
    </item>
    
    <item>
      <title>Observer pattern in golang</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-22-observer-pattern-in-golang/</link>
      <pubDate>Sat, 22 Mar 2014 10:37:14 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-22-observer-pattern-in-golang/</guid>
      <description>For some reason at some point, I thought it would be hard to implement the observer pattern in Go. Then I made an issue for me to blog about it. Well it&amp;rsquo;s not hard. It&amp;rsquo;s as easy as it is in every other language.
Observers First part of the observer pattern is you need the actual observers. The logic that you want executed whenever something happens. Here I&amp;rsquo;ve just put a simple log print statement that will print out the name of the hook to the log.</description>
    </item>
    
    <item>
      <title>Why hacking on production code during an interview is a good thing</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-22-why-hacking-on-production-code-during-an-interview-is-a-good-thing/</link>
      <pubDate>Fri, 21 Mar 2014 18:53:00 +0000</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-22-why-hacking-on-production-code-during-an-interview-is-a-good-thing/</guid>
      <description>Wrote this ages ago and just found it and figured I should post it.
A while back I saw a blog post (link) saying that he would never hack on a production code base during the interview. Since he was not getting paid for it. Well I strongly disagree with that, both from an interviewee and an interviewer point of view.
Interviewer While working at my last job I was in charge of the technical test for developers.</description>
    </item>
    
    <item>
      <title>The git-flow branch model is waterfall?</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-20-gitflow-is-waterfall-slash/</link>
      <pubDate>Thu, 20 Mar 2014 15:23:04 -0400</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-20-gitflow-is-waterfall-slash/</guid>
      <description>For those not in the know, git-flow is technically a tool for git which allows for the easy use of a specific branch model. Which is most commonly referred to as git-flow. This blog post isn&amp;rsquo;t about that tool which is super useful. But is about the branch model. Which is also super useful in my opinion if you&amp;rsquo;re implementing the waterfall development process.
Disclaimer: This isn&amp;rsquo;t meant to be a criticism of either the branching model or the waterfall process.</description>
    </item>
    
    <item>
      <title>100 days of github</title>
      <link>http://blog.humblyarrogant.io/post/2014-03-14-100-days-of-github/</link>
      <pubDate>Fri, 14 Mar 2014 19:42:49 +0000</pubDate>
      
      <guid>http://blog.humblyarrogant.io/post/2014-03-14-100-days-of-github/</guid>
      <description>So I&amp;rsquo;ve decided to I need to get back to programming more things in my spare time. One way to kinda force this on myself is to attempt to do 100 days of github contributions.
My first aim is to write an actual project to do something I need. Currently one of the things I need is something to give me better overview of the status of builds on Jenkins. Currently I just know if the builds are passing or failing.</description>
    </item>
    
  </channel>
</rss>